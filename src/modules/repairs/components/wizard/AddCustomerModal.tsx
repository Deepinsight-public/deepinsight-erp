import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { useToastService } from '@/components/shared/ToastService';
import { supabase } from '@/integrations/supabase/client';

interface AddCustomerModalProps {
  open: boolean;
  onClose: () => void;
  onSuccess: (customer: any) => void;
}

export function AddCustomerModal({ open, onClose, onSuccess }: AddCustomerModalProps) {
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    email: '',
    address: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { showSuccess, showError } = useToastService();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.fullName.trim()) {
      showError('Full name is required');
      return;
    }

    try {
      setIsSubmitting(true);

      // Get user profile to get store_id
      const { data: profile } = await supabase
        .from('profiles')
        .select('store_id')
        .eq('user_id', (await supabase.auth.getUser()).data.user?.id)
        .single();

      if (!profile?.store_id) {
        throw new Error('User store not found');
      }

      // Split full name into first and last
      const nameParts = formData.fullName.trim().split(' ');
      const firstName = nameParts[0];
      const lastName = nameParts.slice(1).join(' ');

      const { data, error } = await supabase
        .from('customers')
        .insert({
          store_id: profile.store_id,
          first_name: firstName,
          last_name: lastName || null,
          email: formData.email || null,
          phone: formData.phone || null,
          // Customer code will be auto-generated by the database
        })
        .select('*')
        .single();

      if (error) throw error;

      const customer = {
        id: data.id,
        name: formData.fullName,
        email: formData.email,
        phone: formData.phone,
        customerCode: data.customer_code
      };

      showSuccess('Customer created successfully');
      onSuccess(customer);

      // Reset form
      setFormData({
        fullName: '',
        phone: '',
        email: '',
        address: ''
      });
    } catch (error) {
      console.error('Error creating customer:', error);
      showError('Failed to create customer. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setFormData({
      fullName: '',
      phone: '',
      email: '',
      address: ''
    });
    onClose();
  };

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Add New Customer</DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="fullName">Full Name *</Label>
            <Input
              id="fullName"
              value={formData.fullName}
              onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}
              placeholder="Enter full name"
              required
            />
          </div>

          <div>
            <Label htmlFor="phone">Phone</Label>
            <Input
              id="phone"
              type="tel"
              value={formData.phone}
              onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
              placeholder="Enter phone number"
            />
          </div>

          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              placeholder="Enter email address"
            />
          </div>

          <div>
            <Label htmlFor="address">Address</Label>
            <Textarea
              id="address"
              value={formData.address}
              onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
              placeholder="Enter address"
              rows={3}
            />
          </div>

          <div className="flex justify-end gap-2 pt-4">
            <Button type="button" variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting ? 'Creating...' : 'Create Customer'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}